* meta
** general behavior
   #+BEGIN_SRC emacs-lisp
          (menu-bar-mode -1)
          (toggle-scroll-bar -1) 
          (tool-bar-mode -1)
          (set-frame-parameter nil 'fullscreen 'fullboth)
          (setq inhibit-startup-message t)
          (setq visible-bell nil
                ring-bell-function 'flash-mode-line)
          (defun flash-mode-line ()
            (invert-face 'mode-line)
            (run-with-timer 0.1 nil #'invert-face 'mode-line))
          (global-auto-revert-mode t)
     ;; (use-package exwm :ensure t
     ;;     :config 
     ;;     (use-package exwm-config
     ;;         :config (exwm-config-default)))
     (defun disable-scroll-bars (frame)
       (modify-frame-parameters frame
                                '((vertical-scroll-bars . nil)
                                  (horizontal-scroll-bars . nil))))
     (add-hook 'after-make-frame-functions 'disable-scroll-bars)
   #+END_SRC
** show line nums in prog, text modes
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'linum-mode)
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC
** modeline - show battery status, datetime
   #+BEGIN_SRC emacs-lisp
     (require 'battery)
     (when (and battery-status-function
		(not (string-match-p "N/A"
				     (battery-format "%B"
						     (funcall battery-status-function)))))
       (display-battery-mode 1))
     (display-time-mode 1)
   #+END_SRC
** theme
*** color
   #+BEGIN_SRC emacs-lisp
          (use-package monokai-theme
            :ensure t)
   #+END_SRC
*** font
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Inconsolata 12" nil t)
    #+END_SRC
** shortcuts
*** window navigation
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-.") 'next-multiframe-window)
      (global-set-key (kbd "C-,") 'previous-multiframe-window)
    #+END_SRC
*** yes-no to y-n
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** f5 revert-buffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC
*** C-x k kills current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* general
** use-package
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
     :ensure t
     :config
     (which-key-mode))
   #+END_SRC
** counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
     :ensure t
     )
   #+END_SRC
** swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
     :ensure try
     :config
     (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-load-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
     ))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char))
   #+END_SRC
** ibuffer
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC
** winner-mode
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
    (use-package elfeed
    :ensure t)
    (setq elfeed-feeds
	  '("https://www.eff.org/rss/updates.xml"
	    "http://feeds.arstechnica.com/arstechnica/index/"
	    "https://news.ycombinator.com/rss"
	    "https://reddit.com/r/webdev/.rss"
	    "https://reddit.com/r/compsci/.rss"
	    "https://reddit.com/r/programming/.rss"
	    "https://reddit.com/r/opensource/.rss"
	    "https://reddit.com/r/freesoftware/.rss"
	    "https://reddit.com/r/emacs/.rss"
	    "http://feeds.feedburner.com/TechCrunch/"))
#+END_SRC
** dired-sidebar
   #+BEGIN_SRC emacs-lisp
              (use-package dired-sidebar
               :bind (("C-x t" . dired-sidebar-toggle-sidebar))
               :ensure t
               :commands (dired-sidebar-toggle-sidebar)
               :init
               (setq dired-sidebar-theme 'nerd))
  #+END_SRC
* code
** meta
*** rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:ensure t)
    #+END_SRC
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config
        (add-hook 'prog-mode-hook (lambda ()
                                    (rainbow-delimiters-mode)
                                    (smartparens-mode))))
    #+END_SRC
** javascript
*** offset, indent
    #+BEGIN_SRC emacs-lisp
      (setq-default js2-basic-offset 2)
      (setq-default js-indent-level 2)
    #+END_SRC
*** js2-mode
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
	:ensure t
	:config
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
	(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
	(add-hook 'js2-mode-hook  (lambda ()
				    (tern-mode)
				    (company-mode))))
    #+END_SRC
*** rjsx-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
	:ensure t)
    #+END_SRC
*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t)

      (use-package company-tern
	:ensure t
	:config
	(add-to-list 'company-backends 'company-tern))
    #+END_SRC
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(display-time-24hr-format t)
  '(display-time-day-and-date t)
  )
  
