* meta
** remove gui elements, set to fullscreen on launch, inhibit startup message
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (toggle-scroll-bar -1) 
     (tool-bar-mode -1)
     (set-frame-parameter nil 'fullscreen 'fullboth)
     (setq inhibit-startup-message t)
   #+END_SRC
** show line nums in prog, text modes
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'linum-mode)
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC
** set path
   #+BEGIN_SRC emacs-lisp
     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
     (setq exec-path (append exec-path '("/usr/local/bin")))
   #+END_SRC
** modeline - show battery status, datetime
   #+BEGIN_SRC emacs-lisp
     (require 'battery)
     (when (and battery-status-function
		(not (string-match-p "N/A"
				     (battery-format "%B"
						     (funcall battery-status-function)))))
       (display-battery-mode 1))
     (display-time-mode 1)
   #+END_SRC
** color theme
   #+BEGIN_SRC emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :config (load-theme 'sanityinc-tomorrow-eighties t))
   #+END_SRC
** shortcuts
*** window navigation
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-.") 'next-multiframe-window)
      (global-set-key (kbd "C-,") 'previous-multiframe-window)
    #+END_SRC
*** yes-no to y-n
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** f5 revert-buffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC
* general
** use-package
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
     :ensure t
     :config
     (which-key-mode))
   #+END_SRC
** counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
     :ensure t
     )
   #+END_SRC
** swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
     :ensure try
     :config
     (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-load-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
     ))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char-2))
   #+END_SRC
** ibuffer
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+END_SRC
** winner-mode
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC
** chuck-mode
   #+BEGIN_SRC emacs-lisp
     (use-package chuck-mode
       :load-path "~/.emacs.d/packages/chuck-mode/"
       :config
       (add-hook 'chuck-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
   #+END_SRC
* code
** meta
*** rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:ensure t)
    #+END_SRC
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
	:ensure t
	:config
	(add-hook 'prog-mode-hook (lambda ()
				    (rainbow-delimiters-mode)
				    (smartparens-mode)))))
    #+END_SRC
** javascript
*** offset, indent
    #+BEGIN_SRC emacs-lisp
      (setq-default js2-basic-offset 2)
      (setq-default js-indent-level 2)
    #+END_SRC
*** js2-mode
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
	:ensure t
	:config
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
	(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
	(add-hook 'js2-mode-hook  (lambda ()
				    (tern-mode)
				    (company-mode))))
    #+END_SRC
*** rjsx-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
	:ensure t)
    #+END_SRC
*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t)

      (use-package company-tern
	:ensure t
	:config
	(add-to-list 'company-backends 'company-tern))
    #+END_SRC
* treemacs
  #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
	(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
	(setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
	      treemacs-display-in-side-window        t
	      treemacs-file-event-delay              5000
	      treemacs-deferred-git-apply-delay      nil
	      treemacs-file-follow-delay             0.2
	      treemacs-follow-after-init             t
	      treemacs-git-command-pipe              ""
	      treemacs-goto-tag-strategy             'refetch-index
	      treemacs-indentation                   2
	      treemacs-indentation-string            " "
	      treemacs-is-never-other-window         nil
	      treemacs-max-git-entries               5000
	      treemacs-no-png-images                 t
	      treemacs-no-delete-other-windows       t
	      treemacs-project-follow-cleanup        nil
	      treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	      treemacs-recenter-distance             0.1
	      treemacs-recenter-after-file-follow    nil
	      treemacs-recenter-after-tag-follow     nil
	      treemacs-recenter-after-project-jump   'always
	      treemacs-recenter-after-project-expand 'on-distance
	      treemacs-show-cursor                   nil
	      treemacs-show-hidden-files             t
	      treemacs-silent-filewatch              nil
	      treemacs-silent-refresh                nil
	      treemacs-sorting                       'alphabetic-desc
	      treemacs-space-between-root-nodes      t
	      treemacs-tag-follow-cleanup            t
	      treemacs-tag-follow-delay              1.5
	      treemacs-width                         35)

	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode t)
	(pcase (cons (not (null (executable-find "git")))
		     (not (null (executable-find "python3"))))
	  (`(t . t)
	   (treemacs-git-mode 'deferred))
	  (`(t . _)
	   (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)

    ;;(use-package treemacs-icons-dired
    ;;  :after treemacs dired
    ;;  :ensure t
    ;;  :config (treemacs-icons-dired-mode))

    ;;(use-package treemacs-magit
    ;;  :after treemacs magit

    ;;  :ensure t)
  #+END_SRC
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(display-time-24hr-format t)
  '(display-time-day-and-date t)
  )
  
